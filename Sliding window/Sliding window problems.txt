Sliding window problems

1.Container With Most Water

class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int max = 0;
        while(left < right){
            int w = right - left;
            int h = Math.min(height[left], height[right]);
            int area = h * w;
            max = Math.max(max, area);
            if(height[left] < height[right]) left++;
            else if(height[left] > height[right]) right--;
            else {
                left++;
                right--;
            }
        }
        return max;
    }
}


2.Longest Substring Without Repeating Characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int start = 0; 
        int end = 0;   
        int result = 0; 
        int n = s.length();
        while (end < n) {
            String sub = s.substring(start, end + 1); 
            if (isUnique(sub)) { 
                result = Math.max(result, sub.length()); 
                end++; 
            } else {
                start++;
            }
        }
        return result; 
    }
    private static boolean isUnique(String s) {
        if (s.length() > 128) { 
            return false;
        }
        boolean[] marker = new boolean[128];
        for (char c : s.toCharArray()) {
            if (marker[c]) { 
                return false;
            }
            marker[c] = true;         }
        return true; 
    }
}

3.Valid Anagram


import java.util.Arrays;

class Solution {
    public boolean isAnagram(String s, String t) {
        char[] sChars = s.toCharArray();
        char[] tChars = t.toCharArray();
        
        Arrays.sort(sChars);
        Arrays.sort(tChars);
        
        return Arrays.equals(sChars, tChars);
    }
}

4.First Unique Character in a String

public class Solution {
    public int firstUniqChar(String s) {
        int freq [] = new int[26];
        for(int i = 0; i < s.length(); i ++)
            freq [s.charAt(i) - 'a'] ++;
        for(int i = 0; i < s.length(); i ++)
            if(freq [s.charAt(i) - 'a'] == 1)
                return i;
        return -1;
    }
}


5.Check If a String Contains All Binary Codes of Size K


class Solution {
//     Sliding Window Technique
    public boolean hasAllCodes(String s, int k) {
        HashSet<String> set = new HashSet<>();
        for(int i = 0; i < s.length() - k + 1; i++){
            set.add(s.substring(i, i + k));
        }
        return set.size() == Math.pow(2, k);
    }
}

6.Find All Anagrams in a String

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        char sc[] = s.toCharArray();
        char pc[] = p.toCharArray();

        List<Integer> res = new ArrayList<>();
        Arrays.sort(pc);

        int k = pc.length;
        for (int i = 0; i <= sc.length - k; i++) {
            String str = s.substring(i, i + k);
            char sort[] = str.toCharArray();
            Arrays.sort(sort);
            if (Arrays.equals(pc, sort)) {
                res.add(i);
            }
        }
        return res;
    }
}

7.Permutation in String

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] map = new int[26];
        for(char c : s1.toCharArray()) map[c - 'a']++;
        int j = 0, i = 0;
        int count_chars = s1.length();
        while(j < s2.length()){
            if(map[s2.charAt(j++) - 'a']-- > 0)
                count_chars--;
            if(count_chars == 0) return true;
            if(j - i == s1.length() && map[s2.charAt(i++) - 'a']++ >= 0)
                count_chars++;
        }
        return false;
    }
}

8.substrings of Size Three with Distinct Characters

class Solution {
    public int countGoodSubstrings(String s) {
        int i=0, j=0, count=0;
        while(j<s.length()){
            if(j-i+1==3){
                if(s.charAt(i) != s.charAt(i+1) && s.charAt(i+1) != s.charAt(i+2) 
                && s.charAt(i+2) != s.charAt(i)){
                    count++;
                }
                i++;
            }
            j++;
        }
        return count;
    }
}

9.Two Sum


class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap();
        
        for(int i = 0; i < nums.length; ++i) {
            if(map.containsKey(target-nums[i])) {
                return new int[]{map.get(target-nums[i]), i};
            }
            map.put(nums[i], i);
        }
        return null;
    }
}



10.3Sum

class Solution {
    public List<List<Integer>> threeSum(int[] a) {
        int n = a.length;
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(a);
        
        for(int i = 0; i < n-2; i++) {
            int target = -a[i];
            int j = i + 1;
            int k = n - 1;
            while(j < k) {
                int sum = a[j] + a[k];
                if(sum < target) {
                   j++; 
                } else if(sum > target) {
                    k--; 
                } else {
                    List<Integer> l = new ArrayList<>();
                    l.add(a[i]);
                    l.add(a[j]);
                    l.add(a[k]);
                    ans.add(l);

                    while(j < k && a[j] == a[j+1])
                        j++;
                    j++;
                    while(j < k && a[k] == a[k-1])
                        k--;
                    k--;
                }
            }
            
            while(i < n-2 && a[i] == a[i+1])
                i++;
        }
        return ans;
    }
}

11.Two Sum II - Input Array Is Sorted

class Solution {
public int[] twoSum(int[] numbers, int target) {

    int l =0;
    int r = numbers.length-1;

    while(l < numbers.length && r > 0)
    {
        
        if( numbers[r] + numbers[l] == target  ) 
        {
            
            return new int[] {l+1,r+1};
        }
        if( (numbers[r] + numbers[l] ) > target ) 
        {                              
            r--;
        }
        else{                           
            l++;
        }
    }
    
    return new int[] {0,0};
}
}

12.Is Subsequence

class Solution {
public boolean isSubsequence(String s, String t) {
	int i=0,j=0;
	int m = s.length();
	int n = t.length();
	while (i<m && j<n){
		if (s.charAt(i)==t.charAt(j)){
			i++;
		}
		j++;
	}
	if (i!=m)
		return false;
	else
	return true;
	}
}

13.Valid Palindrome

class Solution {
    public boolean isPalindrome(String s) {
        if(null == s || s.length() == 0)
            return true;
        
        int i = 0, j = s.length() - 1;
        
        while(i < j){
            
            while(i < j && !Character.isLetterOrDigit(s.charAt(i)))
                i++;
            
            while(i < j && !Character.isLetterOrDigit(s.charAt(j)))
                j--;
            
            if(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j)))
                return false;
            i++;
            j--;
            
        }
        return true;
    }
}

14.Minimum Window Substring

class Solution {
    public String minWindow(String s, String t) {
        int m = s.length(), n = t.length();
        HashMap<Character, Integer> mp = new HashMap<>();

        int ans = Integer.MAX_VALUE;
        int start = 0;

        for (char x : t.toCharArray())
            mp.put(x, mp.getOrDefault(x, 0) + 1);

        int count = mp.size();

        int i = 0, j = 0;

        while (j < s.length()) {
            mp.put(s.charAt(j), mp.getOrDefault(s.charAt(j), 0) - 1);
            if (mp.get(s.charAt(j)) == 0)
                count--;

            if (count == 0) {
                while (count == 0) {
                    if (ans > j - i + 1) {
                        ans = j - i + 1;
                        start = i;
                    }
                    mp.put(s.charAt(i), mp.getOrDefault(s.charAt(i), 0) + 1);
                    if (mp.get(s.charAt(i)) > 0)
                        count++;

                    i++;
                }
            }
            j++;
        }
        if (ans != Integer.MAX_VALUE)
            return s.substring(start, start + ans);
        else
            return "";
    }
}

15.Minimum Size Subarray Sum

public class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int left = 0;
        int sum = 0;
        int res = nums.length + 1;
        int found = 0;

        for (int right = 0; right < nums.length; ++right) {
            sum += nums[right];

            while (sum >= target) {
                res = Math.min(res, right - left + 1);
                found = 1;
                sum -= nums[left++];
            }
        }

        return found == 1 ? res : 0;
    }
}

16. Substring with Concatenation of All Words

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        int n = words.length;
        HashMap<String, Integer> map = new HashMap<>();
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            map.put(words[i],map.getOrDefault(words[i],0)+1);
        }
        int k = words[0].length() * words.length;
        int z = words[0].length();
        int i = 0, j = 0;
        while (j < s.length()) {
            if (j - i + 1 == k) {
                String sub = s.substring(i, j + 1);
                HashMap<String, Integer> map2 = new HashMap<>();
                int p = 0;
                while (p < sub.length()) {
                    String temp = sub.substring(p, p + z);
                    map2.put(temp,map2.getOrDefault(temp,0)+1);
                    p +=z;
                }
                if (map.equals(map2)){
                    ans.add(i);
                }
                i++;
            }
            j++;
        }
        return ans;
    }
}
