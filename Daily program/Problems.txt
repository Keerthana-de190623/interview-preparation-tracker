			                  Daily Problem

1.Sort an Array

class Solution {
    public int[] sortArray(int[] nums) {
        mergeSort(nums, 0, nums.length - 1);

        return nums;   
    }
    static void merge(int array[], int left, int mid, int right) {
        int n = mid - left + 1;
        int m = right - mid;
        int[] L = new int[n];
        int[] R = new int[m];
        for (int i = 0; i < n; i++){
            L[i] = array[left + i];
        }
        for (int j = 0; j < m; j++){
            R[j] = array[mid + 1 + j];
        }
        int i = 0;
        int j = 0;
        int k = left;
        while (i < n && j < m) {
            if (L[i] <= R[j]) {
                array[k] = L[i];
                i++;
            } 
            else {
                array[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n) {
            array[k] = L[i];
            i++;
            k++;
        }
        while (j < m) {
            array[k] = R[j];
            j++;
            k++;
        }
    }
    static void mergeSort(int array[], int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            mergeSort(array, left, mid);
            mergeSort(array, mid + 1, right);

            merge(array, left, mid, right);
        }
    }
}

2.Fizz Buzz

class Solution {
    public List<String> fizzBuzz(int n) {
        String []answer = new String[n];

        for(int i=1; i<=n; i++) {
            if(i % 3 == 0 && i % 5 == 0) {
                answer[i-1] = "FizzBuzz";
            } else if(i % 3 == 0) {
                answer[i-1] = "Fizz";
            } else if(i % 5 == 0) {
                answer[i-1] = "Buzz";
            } else {
                answer[i-1] = Integer.toString(i);
            }
        }
        return new ArrayList<>(Arrays.asList(answer));
    }
}

3.First Unique Character in a String

public class Solution {
    public int firstUniqChar(String s) {
        int freq [] = new int[26];
        for(int i = 0; i < s.length(); i ++)
            freq [s.charAt(i) - 'a'] ++;
        for(int i = 0; i < s.length(); i ++)
            if(freq [s.charAt(i) - 'a'] == 1)
                return i;
        return -1;
    }
}

4.Isomorphic Strings

class Solution {
    public boolean isIsomorphic(String s, String t) {
        int map1[]=new int[200];
        int map2[]=new int[200];
        if(s.length()!=t.length())
            return false;
        for(int i=0;i<s.length();i++)
        {
            if(map1[s.charAt(i)]!=map2[t.charAt(i)])
                return false;
            map1[s.charAt(i)]=i+1;
            map2[t.charAt(i)]=i+1;
        }
        return true;
    }
}


5.String Matching in an Array

class Solution {
    public List<String> stringMatching(String[] words) {
        String str = String.join(" ", words);
        List<String> res = new ArrayList<>();
        for(int i = 0; i < words.length; i++){
            if(str.indexOf(words[i]) != str.lastIndexOf(words[i])){
                res.add(words[i]);
            }
        }
        return res;
    }
}

6.Maximum Subarray

class Solution {
    public int maxSubArray(int[] nums) {
        int maxI = Integer.MIN_VALUE; 
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            maxI = Math.max(sum, maxI);
            if (sum < 0) {
                sum = 0;
            }
        }
        return maxI;
    }
}

7.Power of Two

class Solution {
    public boolean isPowerOfTwo(int n) {
        return (Math.log10(n)/Math.log10(2))%1==0;
    }
}

8.Happy Number

class Solution { 
    public boolean isHappy(int n) { 
        Set<Integer> seen = new HashSet<>(); 
        while (n != 1 && !seen.contains(n)) 
        { 
            seen.add(n); n = getNext(n); 
        } 
        return n == 1; 
        } 
    private int getNext(int n) { 
        int sum = 0; 
        while (n > 0) { 
            int digit = n % 10; 
            sum += digit * digit;
            n /= 10;
        }
        return sum;
    }
}

9.Ugly Number

class Solution {
    public boolean isUgly(int n) {
        if(n<1){
            return false;
        }
        while(n>1){
            if(n%2==0)
                n/=2;
            else if(n%3==0)
                n/=3;
            else if(n%5==0)
                n/=5;
            else
                return false;
        }
        return true;
    }
}