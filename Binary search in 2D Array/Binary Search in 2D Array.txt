Binary Search in 2D Array

1.Row with max 1s

class Solution {
    public int rowWithMax1s(int arr[][]) {
        int maxRow = -1;
        int max = 0;
        for(int i = 0; i < arr.length; i++){
            int count = 0;
            for(int j = 0; j < arr[0].length; j++){
                if(arr[i][j] == 1){
                    count = arr[0].length -j;
                    break;
                }
            }
            if(count > max){
                max = count;
                maxRow = i;
            }
        }
        return maxRow;
    }
}

2.Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int left = 0, right = m * n - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int mid_val = matrix[mid / n][mid % n];

            if (mid_val == target)
                return true;
            else if (mid_val < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return false;
    }
}

3.Search a 2D Matrix II

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int i=0; int j=matrix[0].length-1;
        while(i<matrix.length && j>=0){
            if(matrix[i][j]==target){
                return true;
            }else if(matrix[i][j]>target){
                j--;
            }else{
                i++;
            }
        }
        return false;
    }
}

4.Find a Peak Element II

class Solution {
    public int[] findPeakGrid(int[][] mat) {
        return util1(mat);
    }
    
    public int[] util1(int[][] matrix) {
        int startCol = 0, endCol = matrix[0].length - 1, mid = 0;
        while (startCol <= endCol) {
            mid = startCol + (endCol - startCol) / 2;
            int maxi = findMaxInCol(matrix, mid);
            boolean leftBig = false, rightBig = false;

            if (mid - 1 >= 0) {
                if (matrix[maxi][mid - 1] > matrix[maxi][mid]) {
                    leftBig = true;
                }
            }

            if (mid + 1 < matrix[0].length) {
                if (matrix[maxi][mid + 1] > matrix[maxi][mid]) {
                    rightBig = true;
                }
            }

            if (leftBig == false && rightBig == false) {
                int ans[] = { maxi, mid };
                return ans;
            } else if (rightBig) {
                startCol = mid + 1;
            } else {
                endCol = mid - 1;
            }
        }
        return null;
    }

    public int findMaxInCol(int matrix[][], int col) {
        int index = 0;
        for (int i = 0; i < matrix.length; i++) {
            if (matrix[i][col] > matrix[index][col]) {
                index = i;
            }
        }
        return index;
    }
}

5.Median in a row-wise sorted Matrix

class Solution {
  int median(int mat[][]) {
        int row = mat.length;
        int col = mat[0].length;
        int index = 0;
       int [] onelinematrix = new int[row*col];
       for(int i=0;i<row;i++){
           for(int j=0;j<col;j++){
              onelinematrix[index++]=mat[i][j];
              
              
           }
       }
       Arrays.sort(onelinematrix);
       return onelinematrix[(row*col)/2 ];
    }

}
